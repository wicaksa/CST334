/*
 * Name: Wicaksa Munajat
 * Date: <July 19, 2021> (Due: July 20, 2021)
 * Title: CST 334 Lab 4 â€“ FIFO Page Replacement Simulation File Write Up
 * Description: This program simulates how a FIFO algorithm is implemented
 * for a memory management program that uses paging.
 */

Requirements to complete the lab
1. Show the TA your running page replacement simulator.
2. Write up a description of your implementations and sample miss-rate (page fault rate) results; submit it alongside your code. This portion of the assignment is as critical, if not more so, than the actual implementation of your solution. In addition to describing the code you provide a complete write-up will include a test of your solutions and a comparison of the hit rates for the different cache sizes you have implemented (plotting a graph would be strongly recommended). Your tests need include the provided accesses.txt test file provided. Test for memory sizes of between 10 and 1500 pages.

1. Implementation Description: 

The FIFO algorithm of page replacement is very simple to implement. The way I did it was to first initialize an empty queue that is n sized long where n is the number inputted by the user. When reading the text file, the algorithm will first check if the queue is not full. If it's not full, it will then check if the page number is already in the queue. If it is NOT, (this means a Miss), the page will be enqueued and pageFaults will be incremented, and totalRead will also be incremented. If the page already exists in the cue, we will just need to increment the totalRead. 

In the case that the queue is full, and the page number is not already in the queue, we will have to dequeue the oldest item in the queue (first in) and then queue the page number. We also need to increment the miss and page read. If the page number is already in the queue (hit), we do not need to do anything but increment totalRead. 

2. Sample miss-rate 

Cache Size : Miss : Total Read : miss % 
-----------------------------------------
    10       9916    10,000       99    
    100      9018    10,000       90   
    200      8041    10,000       80   
    300      7051    10,000       71   
    400      6103    10,000       61 
    500      5130    10,000       51   
    600      4027    10,000       40 
    700      3301    10,000       33         
    800      2497    10,000       25  
    900      1671    10,000       17  
    1000     999     10,000       10   
    1100     ....     ....        .. 
    1200     ....     ....        .. 
    1300     ....     ....        .. 
    1400     ....     ....        .. 
    1500     999     10,000       10  

The miss rate plateaus once the cache size hits 1000.